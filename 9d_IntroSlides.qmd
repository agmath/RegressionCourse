---
title: "Simple Linear Regression: Construction, Assessment, and Interpretation"
author: Dr. Gilbert
format: 
  revealjs:
    smaller: true
date: today
date-format: long
theme: serif
incremental: true
---

```{r global-options, include=FALSE}
library(tidyverse)
library(tidymodels)
library(palmerpenguins)
library(patchwork)
library(kableExtra)
tidymodels_prefer()

penguins <- palmerpenguins::penguins

penguins <- penguins %>%
  mutate(flipper_length_mm = as.numeric(flipper_length_mm),
         body_mass_g = as.numeric(body_mass_g))

set.seed(123)
penguin_splits <- initial_split(penguins)
penguins_train <- training(penguin_splits)
penguins_test <- testing(penguin_splits)

options(kable_styling_bootstrap_options = c("hover", "striped"))
options(scipen = 999)

#Set ggplot base theme
theme_set(theme_bw(base_size = 14))
```

## The Highlights

+ What is Simple Linear Regression?
+ What are we assuming?
+ Global tests for model utility and the individual term-based test.
+ Further model assessment

  + Validation metrics
  + Residual analysis
+ Model interpretation
+ Predictions

## What is Simple Linear Regression?

```{r}
#| message: false
#| warning: false
#| fig-align: center

p1 <- penguins_train %>%
  ggplot() +
  geom_point(aes(x = flipper_length_mm,
                 y = body_mass_g)) +
  labs(x = "Flipper Length (mm)",
       y = "Body Mass (g)")

p2 <- penguins_train %>%
  ggplot() +
  geom_point(aes(x = bill_depth_mm,
                 y = body_mass_g)) +
  labs(x = "Bill Depth (mm)",
       y = "Body Mass (g)")

p1 + p2
```

. . .

**Question 1 (Inferential):** What, if anything, is the relationship between penguin flipper length and body mass?

. . . 

**Question 1 (Predictive):** Can we use penguin flipper length to predict body mass?

. . .

**Question 2 (Inferential):** What, if anything, is the relationship between penguin bill depth and body mass?

. . . 

**Question 2 (Predictive):** Can we use penguin bill depth to predict body mass?

## What is Simple Linear Regression?

```{r}
#| message: false
#| warning: false
#| fig-align: center

p1 + p2
```

Each of these questions can be answered by the construction and analysis of a model.

. . . 

Simple linear regression predicts a response as a linear function of a single predictor variable.

. . .

$$\mathbb{E}\left[\text{body mass}\right] = \beta_0 + \beta_1\cdot \left(\text{flipper length}\right)\\ \textbf{or}\\ \mathbb{E}\left[\text{body mass}\right] = \beta_0 + \beta_1\cdot \left(\text{bill depth}\right)$$

## What is Simple Linear Regression?

```{r}
#| message: false
#| warning: false
#| fig-align: center

lin_reg_flip_spec <- linear_reg()
lin_reg_flip_rec <- recipe(body_mass_g ~ flipper_length_mm, data = penguins_train)
lin_reg_flip_wf <- workflow() %>%
  add_recipe(lin_reg_flip_rec) %>%
  add_model(lin_reg_flip_spec)
lin_reg_flip_fit <- lin_reg_flip_wf %>%
  fit(penguins_train)

lin_reg_billd_spec <- linear_reg()
lin_reg_billd_rec <- recipe(body_mass_g ~ bill_depth_mm, data = penguins_train)
lin_reg_billd_wf <- workflow() %>%
  add_recipe(lin_reg_billd_rec) %>%
  add_model(lin_reg_billd_spec)
lin_reg_billd_fit <- lin_reg_billd_wf %>%
  fit(penguins_train)

new_data <- tibble(
  flipper_length_mm = seq(min(penguins_train$flipper_length_mm, na.rm = TRUE), max(penguins_train$flipper_length_mm, na.rm = TRUE), length.out = 250),
  bill_depth_mm = seq(min(penguins_train$bill_depth_mm, na.rm = TRUE), max(penguins_train$bill_depth_mm, na.rm = TRUE), length.out = 250)
)

new_data <- lin_reg_flip_fit %>%
  augment(new_data) %>%
  rename(flip_pred = .pred)
new_data <- lin_reg_billd_fit %>%
  augment(new_data) %>%
  rename(billd_pred = .pred)

p1 <- p1 + 
  geom_line(data = new_data,
            aes(x = flipper_length_mm,
                y = flip_pred),
            color = "blue",
            lwd = 2)

p2 <- p2 + 
  geom_line(data = new_data,
            aes(x = bill_depth_mm,
                y = billd_pred),
            color = "blue",
            lwd = 2)

p1 + p2
```

. . .

$$\mathbb{E}\left[\text{body mass}\right] = -5769 + 49.7\left(\text{flipper length}\right)\\ \textbf{or}\\ \mathbb{E}\left[\text{body mass}\right] = 7697 - 203\left(\text{bill depth}\right)$$

## What Are We Assuming?

```{r}
#| message: false
#| warning: false
#| fig-align: center

p1
```

. . . 

$$\mathbb{E}\left[\text{body mass}\right] = \beta_0 + \beta_1\cdot\left(\text{flipper length}\right)$$

. . . 

**Pre-Modeling Assumptions:** Penguin body mass is associated with penguin flipper length in a linear manner, independent of all other possible features.

. . . 

**Post-Modeling Assumptions:** The following assumptions are made about model errors (*residuals*), to ensure that using and interpreting the model is appropriate.

+ Residuals are normally distributed
+ Residuals are independent of one another, the predictor, predictions, and the response
+ The standard deviation of residuals is constant with respect to the predictor, predictions, and the response

## Global and Term-Based Model Assessments

**Global Test for Model Utility:** $\begin{array}{lcl} H_0 & : & \beta_1 = 0\\ H_a & : &\beta_1 \neq 0\end{array}$

```{r}
lin_reg_flip_fit %>%
  glance() %>%
  kable() %>%
  kable_styling()
```

. . . 

**Individual Term-Based Assessment:** $\begin{array}{lcl} H_0 & : & \beta_1 = 0\\ H_a & : &\beta_1 \neq 0\end{array}$

```{r}
lin_reg_flip_fit %>%
  extract_fit_engine() %>%
  tidy() %>%
  kable() %>%
  kable_styling()
```

. . . 

For Simple Linear Regression, the *Global Test for Model Utility* and the *Term-based test* have the same hypotheses and will have the same $p$-value. They are the same test here!

## Additional [Training] Performance Metrics

::::{.columns}

:::{.column width="45%"}

```{r}
#| eval: false
#| echo: true

lin_reg_flip_fit %>%
  glance()
```

```{r}
#| eval: true
#| echo: false

lin_reg_flip_fit %>%
  glance %>%
  pivot_longer(cols = everything(),
               names_to = "metric",
               values_to = "value") %>%
  kable() %>%
  kable_styling()
```

:::

:::{.column width="55%"}

+ $R^2_{\text{adj}} \approx 76.4\%$, so approximately 76.4% of variation in penguin body mass is explained by variation in flipper length.

+ Training RMSE (`sigma`) is about 398.88, so we expect our model to predict penguin body mass to within $\pm 2\cdot\left(398.88\right) \approx \pm 797.76$ grams.

  + Note that this estimate is likely too optimistic.

:::

::::

## Additional [Validation] Performance Metrics

::::{.columns}

:::{.column width="40%"}

```{r}
#| eval: false
#| echo: true

my_metrics <- metric_set(rmse, rsq)

lin_reg_flip_fit %>%
  augment(penguins_test) %>%
  my_metrics(.pred, body_mass_g)
```

```{r}
#| eval: true
#| echo: false

my_metrics <- metric_set(rmse, rsq)

lin_reg_flip_fit %>%
  augment(penguins_test) %>%
  my_metrics(.pred, body_mass_g) %>%
  select(-.estimator) %>%
  kable() %>%
  kable_styling()
```

:::

:::{.column width="60%"}

+ $R^2 \approx 74.1\%$, so approximately 74.1% of variation in penguin body mass is explained by variation in flipper length, when taking away the training data advantage.

+ Test RMSE is about 380.82, so we expect our model to predict penguin body mass to within $\pm 2\cdot\left(380.82\right) \approx \pm 761.64$ grams.

+ The test $R^2$ value is slightly worse than the corresponding training metric, while the test RMSE is an improvement over the training RMSE.

  + Generally, we should expect slightly worse performance on the test data than on training data.

:::

::::

## Residual Analysis

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-align: center

train_with_resids <- lin_reg_flip_fit %>%
  augment(penguins_train)

p1 <- train_with_resids %>%
  mutate(residuals = body_mass_g - .pred) %>%
  ggplot() +
  geom_histogram(aes(x = residuals, y = ..density..),
                 fill = "purple",
                 color = "black",
                 alpha = 0.75) + 
  geom_density(aes(x = residuals),
               fill = "purple",
               alpha = 0.6) + 
  labs(x = "residuals", y = "")

p2 <- train_with_resids %>%
  mutate(residuals = body_mass_g - .pred) %>%
  ggplot() +
  geom_point(aes(x = body_mass_g, y = residuals)) + 
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "red") +
  geom_smooth(aes(x = body_mass_g, y = residuals)) +
  labs(x = "Body Mass", y = "Residuals")

p3 <- train_with_resids %>%
  mutate(residuals = body_mass_g - .pred) %>%
  ggplot() +
  geom_point(aes(x = .pred, y = residuals)) + 
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "red") +
  geom_smooth(aes(x = .pred, y = residuals)) + 
  labs(x = "Predictions", y = "Residuals")

p4 <- train_with_resids %>%
  mutate(residuals = body_mass_g - .pred) %>%
  ggplot() +
  geom_point(aes(x = flipper_length_mm, y = residuals)) + 
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "red") +
  geom_smooth(aes(x = flipper_length_mm, y = residuals)) +
  labs(x = "Flipper Length", y = "Residuals")

(p1 + p2) / (p3 + p4) + plot_annotation(title = "Residual Plots")
```

. . . 

The residuals look approximately normal -- with some right skew. There does seem to be an association between the residuals and response, predictions, and flipper length though.

. . . 

Patterns in residual plots indicate that we could make a better model.

## Model Interpretations

```{r}
#| echo: false
#| eval: true

lin_reg_flip_fit %>%
  extract_fit_engine() %>%
  tidy() %>%
  kable() %>%
  kable_styling()
```

. . .

$$\mathbb{E}\left[\text{body mass}\right] = -5768.76 + 49.67\cdot\left(\text{flipper length}\right)$$

. . .

**Interpretations:** 

+ (*Intercept*) We expect a penguin whose flipper length measures 0mm to have a mass of about -5768.76g

  + Note that this is not reasonable, and our model doesn't support this interpretation since our shortest observed flipper length was 172mm.
  + We could force the intercept to be 0, but we would observe worse fit.
  
+ (*Flipper Length*) We expect a 1mm increase in flipper length to be associated with about a 49.67g increase in penguin body mass, on average.

## Using the Model to Make Predictions

Consider the following questions:

1. What is the body mass of a penguin whose flipper length is 212mm?
2. What is the average body mass of *all* penguins whose flipper lengths are 212mm?

. . . 

The first question is asking about the mass of a single penguin, while the second question is asking about the average mass over all penguins with a particular characteristic.

. . .

There is more uncertainty associated with trying to answer the first question.

. . .

Our model predicts 

\begin{align} \mathbb{E}\left[\text{body mass}\right] &= -5768.76 + 49.67\left(212\right)\\
&= 4761.28\text{g}
\end{align}

as the answer to both -- we have 0% confidence in this!

## Using the Model to Make Predictions

```{r}
#| echo: true
#| eval: false

new_penguin <- tibble(
  flipper_length_mm = 212
)

lin_reg_flip_fit %>%
  predict(new_penguin)
```

```{r}
#| echo: false
#| eval: true

new_penguin <- tibble(
  flipper_length_mm = 212
)

new_penguin <- new_penguin %>%
  bind_cols(
    lin_reg_flip_fit %>%
      predict(new_penguin)
  ) %>%
  bind_cols(
    lin_reg_flip_fit %>%
      predict(new_penguin,
              type = "conf_int") %>%
      rename(.conf_lower = .pred_lower,
             .conf_upper = .pred_upper)
  ) %>%
  bind_cols(
    lin_reg_flip_fit %>%
      predict(new_penguin, type = "pred_int")
  )

lin_reg_flip_fit %>%
  predict(new_penguin) %>%
  kable() %>%
  kable_styling()
```

```{r}
#| message: false
#| warning: false
#| fig-align: center

point_colors <- c("training" = "black", "new" = "darkgreen")

ggplot() +
  geom_line(data = new_data,
            aes(x = flipper_length_mm, 
                y = flip_pred),
            color = "blue",
            lwd = 2,
            alpha = 0.5) + 
  geom_point(data = penguins_train,
             aes(x = flipper_length_mm,
                 y = body_mass_g,
                 color = "training"),
             alpha = 0.2) +
  geom_point(data = new_penguin,
             aes(x = flipper_length_mm,
                 y = .pred,
                 color = "new"),
             size = 6) + 
  scale_color_manual(values = point_colors) + 
  labs(x = "Flipper Length (mm)",
       y = "Body Mass (g)",
       color = "Penguin Type") 

```

## Using the Model to Make Predictions

What is <font color="green">the body mass of a penguin whose flipper length is 212mm</font>?

```{r}
#| echo: true
#| eval: false

lin_reg_flip_fit %>%
  predict(new_penguin, type = "pred_int", level = 0.95)
```

```{r}
#| echo: false
#| eval: true

lin_reg_flip_fit %>%
  predict(new_penguin, type = "pred_int") %>%
  kable() %>%
  kable_styling()
```

```{r}
#| message: false
#| warning: false
#| fig-align: center

point_colors <- c("prediction" = "darkgreen")

ggplot() +
  geom_line(data = new_data,
            aes(x = flipper_length_mm, 
                y = flip_pred),
            color = "blue",
            lwd = 2,
            alpha = 0.5) + 
  geom_point(data = penguins_train,
             aes(x = flipper_length_mm,
                 y = body_mass_g),
             color = "black",
             alpha = 0.2) +
  geom_errorbar(data = new_penguin,
                aes(x = flipper_length_mm,
                    ymin = .pred_lower,
                    ymax = .pred_upper,
                    color = "prediction"),
                alpha = 0.75,
                lwd = 1.5,
                width = 5) +
  geom_point(data = new_penguin,
             aes(x = flipper_length_mm,
                 y = .pred),
             color = "darkgreen",
             size = 6) + 
  scale_color_manual(values = point_colors) + 
  labs(x = "Flipper Length (mm)",
       y = "Body Mass (g)",
       color = "Interval") 

```

## Using the Model to Make Predictions

What is <font color="purple">the *average* body mass of *all* penguins whose flipper length is 212mm</font>?

```{r}
#| echo: true
#| eval: false

lin_reg_flip_fit %>%
  predict(new_penguin, type = "conf_int", level = 0.95)
```

```{r}
#| echo: false
#| eval: true

lin_reg_flip_fit %>%
  predict(new_penguin, type = "conf_int") %>%
  kable() %>%
  kable_styling()
```

```{r}
#| message: false
#| warning: false
#| fig-align: center

point_colors <- c("confidence" = "purple")

ggplot() +
  geom_line(data = new_data,
            aes(x = flipper_length_mm, 
                y = flip_pred),
            color = "blue",
            lwd = 2,
            alpha = 0.5) + 
  geom_point(data = penguins_train,
             aes(x = flipper_length_mm,
                 y = body_mass_g),
             color = "black",
             alpha = 0.2) +
  geom_errorbar(data = new_penguin,
                aes(x = flipper_length_mm,
                    ymin = .conf_lower,
                    ymax = .conf_upper,
                    color = "confidence"),
                alpha = 0.75,
                lwd = 1.5,
                width = 5) +
  geom_point(data = new_penguin,
             aes(x = flipper_length_mm,
                 y = .pred),
             color = "darkgreen",
             size = 6) + 
  scale_color_manual(values = point_colors) + 
  labs(x = "Flipper Length (mm)",
       y = "Body Mass (g)",
       color = "Interval") 
```


## Using the Model to Make Predictions

What is <font color="green">the body mass of a penguin whose flipper length is 212mm</font>?

+ Somewhere between `r round(new_penguin %>% pull(.pred_lower), 1)`g and `r round(new_penguin %>% pull(.pred_upper), 1)`g, with 95% confidence.

What is <font color="purple">the *average* body mass of *all* penguins whose flipper length is 212mm</font>?

+ Somewhere between `r round(new_penguin %>% pull(.conf_lower), 1)`g and `r round(new_penguin %>% pull(.conf_upper), 1)`g, with 95% confidence.

```{r}
#| message: false
#| warning: false
#| fig-align: center

point_colors <- c("prediction" = "darkgreen", "confidence" = "purple")

ggplot() +
  geom_line(data = new_data,
            aes(x = flipper_length_mm, 
                y = flip_pred),
            color = "blue",
            lwd = 2,
            alpha = 0.5) + 
  geom_point(data = penguins_train,
             aes(x = flipper_length_mm,
                 y = body_mass_g),
             color = "black",
             alpha = 0.2) +
  geom_errorbar(data = new_penguin,
                aes(x = flipper_length_mm,
                    ymin = .pred_lower,
                    ymax = .pred_upper,
                    color = "prediction"),
                alpha = 0.5,
                lwd = 1.5,
                width = 5) +
  geom_errorbar(data = new_penguin,
                aes(x = flipper_length_mm,
                    ymin = .conf_lower,
                    ymax = .conf_upper,
                    color = "confidence"),
                alpha = 1,
                lwd = 1.5,
                width = 5) +
  geom_point(data = new_penguin,
             aes(x = flipper_length_mm,
                 y = .pred),
             color = "darkgreen",
             size = 6) + 
  scale_color_manual(values = point_colors) + 
  labs(x = "Flipper Length (mm)",
       y = "Body Mass (g)",
       color = "Interval")
```

## Summary

+ Simple linear regression models are models of the form $\displaystyle{\mathbb{E}\left[y\right] = \beta_0 + \beta_1 x}$, with one predictor.
+ We assume that the sole predictor is linearly associated with the response, independent of any other features. 
+ The *global test for model utility* and the *test for significance of the predictor* are identical in this case.
+ We further assess simple linear regression models with summary metrics like $R^2_{\text{adj}}$, RMSE (both training and testing), as well as residual plots.
+ The intercept is the expected response when the predictor takes a value of 0, which may not be meaningful or supported.
+ The coefficient on the predictor can be interpreted as a slope.
+ We can predict responses for a single observation, or an average over all observations having the same value of the predictor.



